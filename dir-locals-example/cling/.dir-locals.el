((nil . ((compilation-read-command . nil)
	 (cm-conda-env . "test-xeus-cling")
	 (cm-build-dir . "build")
	 (cm-install-dir . "install")
	 (cm-configure-cmd . "cmake -G Ninja -DCMAKE_BUILD_TYPE=RELEASE -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF -DCMAKE_LINKER=/usr/bin/gold -DLLVM_ENABLE_RTTI=ON \\'-DCMAKE_JOB_POOLS:STRING=compile=28\\;link=14\\' \\\"-DCMAKE_JOB_POOL_COMPILE:STRING=compile\\\" \\\"-DCMAKE_JOB_POOL_LINK:STRING=link\\\" -DLLVM_TARGETS_TO_BUILD=\"host\\;NVPTX\" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON %s")
	 (eval . (cm-set-projectile-project-type))
	 (eval . (progn
		   (if (dir-locals-find-file ".")
		       (progn
			 (set (make-local-variable 'llvm-root)
			      (file-name-directory
			       (let ((d (dir-locals-find-file ".")))
				 (if (stringp d) d (car d)))))))))
	 (cling-args . "")
	 (eval . (defun init-cling-shell ()
		   (let ((currbuff (current-buffer)))
		     (ansi-term "/bin/bash" "cling-shell")
		     (sleep-for 0 5)
		     (switch-to-buffer currbuff)
		     (comint-send-string "*cling-shell*" "enable_conda\n")
		     (comint-send-string "*cling-shell*" (concat "conda activate " cm-conda-env "\n")))))
	 (eval . (defun rerun-cling ()
		   (comint-send-string "*cling-shell*" ".q\n")
		   (sleep-for 0 200)
		   (comint-send-string "*cling-shell*" (concat (projectile-compilation-dir) "/bin/cling " cling-args "\n" ))
		   (if (get-buffer-window "*cling-shell*" t)
		       (switch-to-buffer-other-frame "*cling-shell*")
		     (pop-to-buffer "*cling-shell*"))))
	 (eval . (defun run-cling ()
		   (interactive)
		   (if (get-buffer "*cling-shell*")
		       (rerun-cling)
		     (progn
		       (init-cling-shell)
		       (rerun-cling)))))
	 )
      ))
